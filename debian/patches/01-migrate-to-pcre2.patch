--- a/vstring/vstrlib.h
+++ b/vstring/vstrlib.h
@@ -49,7 +49,8 @@
 
 #include <stdlib.h>
 #include <time.h>
-#include <pcre.h>
+#define PCRE2_CODE_UNIT_WIDTH 8
+#include <pcre2.h>
 
 #include "vstring.h"
 
@@ -199,16 +200,16 @@ class VRegexp
   int opt_nocase; // 1 if caseless search needed
 
   /* regexp data */
-  pcre*       re; // regexp object, allocated here, for MODE_REGEXP
-  pcre_extra *pe; // regexp extra data if re was studied, not in use now (TODO)
-  int         sp[VREGEXP_MAX_SUBS*3]; // sub pointers
-  int         rc; // result after successful pcre_exec()
-  const char *lp; // last subject data to search in, external, just keep ptr
+  pcre2_code       *re; // regexp object, allocated here, for MODE_REGEXP
+  pcre2_match_data *pe; // regexp extra data if re was studied, not in use now (TODO)
+  int               sp[VREGEXP_MAX_SUBS*3]; // sub pointers
+  int               rc; // result after successful pcre_exec()
+  const char       *lp; // last subject data to search in, external, just keep ptr
 
   /* no-regexp/hex search pattern */
-  char*       pt; // pattern for MODE_FIND and MODE_HEX
-  int         pl; // pattern length
-  int         pos; // last match found pos
+  char*             pt; // pattern for MODE_FIND and MODE_HEX
+  int               pl; // pattern length
+  int               pos; // last match found pos
 
   /* common data */
   //VString substr;
--- a/vstring/vstrlib.cpp
+++ b/vstring/vstrlib.cpp
@@ -542,8 +542,8 @@ int mem_string_search( const char *p, co
 
   VRegexp::~VRegexp()
   {
-    if ( pe ) pcre_free_study( pe );
-    if ( re ) pcre_free( re );
+    if ( pe ) pcre2_match_data_free( pe );
+    if ( re ) pcre2_code_free( re );
     if ( pt ) delete pt;
   }
 
@@ -560,10 +560,10 @@ int mem_string_search( const char *p, co
       {
       switch( opt[z] )
         {
-        case 'i': options |= PCRE_CASELESS; opt_nocase = 1; break;
-        case 'm': options |= PCRE_MULTILINE; break;
-        case 's': options |= PCRE_DOTALL; break;
-        case 'x': options |= PCRE_EXTENDED; break;
+        case 'i': options |= PCRE2_CASELESS; opt_nocase = 1; break;
+        case 'm': options |= PCRE2_MULTILINE; break;
+        case 's': options |= PCRE2_DOTALL; break;
+        case 'x': options |= PCRE2_EXTENDED; break;
         case 'f': opt_mode = MODE_FIND; break;
         case 'h': opt_mode = MODE_HEX; break;
         case 'r': opt_mode = MODE_REGEXP; break;
@@ -575,8 +575,8 @@ int mem_string_search( const char *p, co
 
   int VRegexp::comp( const char* pattern, const char *opt )
   {
-    if ( pe ) pcre_free_study( pe );
-    if ( re ) pcre_free( re );
+    if ( pe ) pcre2_match_data_free( pe );
+    if ( re ) pcre2_code_free( re );
     if ( pt ) delete [] pt;
     re = NULL;
     pt = NULL;
@@ -589,7 +589,7 @@ int mem_string_search( const char *p, co
       {
       const char *error;
       int erroffset;
-      re = pcre_compile( pattern, options, &error, &erroffset, NULL );
+      re = pcre2_match( pattern, options, &error, &erroffset, NULL );
 
       if ( re )
         {
@@ -618,9 +618,10 @@ int mem_string_search( const char *p, co
   int VRegexp::study()
   {
     if ( ! re ) return 0;
-    if ( pe ) pcre_free_study( pe );
-    const char *err;
-    pe = pcre_study( re, 0, &err ); // TODO: PCRE_STUDY_JIT_COMPILE ***
+    if ( pe ) pcre2_match_data_free( pe );
+    //const char *err;
+    //pe = pcre_study( re, 0, &err ); // TODO: PCRE_STUDY_JIT_COMPILE ***
+    pe = pcre2_match_data_create_from_pattern(re, NULL);
     
     return pe ? 1 : 0;
   }
@@ -649,7 +650,7 @@ int mem_string_search( const char *p, co
     lp = line;
     if ( opt_mode == MODE_REGEXP )
       {
-      rc = pcre_exec( re, pe, lp, strlen( lp ), 0, 0, sp, VREGEXP_MAX_SUBS*3 );
+      rc = pcre2_match( re, pe, lp, strlen( lp ), 0, 0, sp, VREGEXP_MAX_SUBS*3 );
       ASSERT( rc >= -1 && rc != 0 );
       if ( rc > VREGEXP_MAX_SUBS ) rc = VREGEXP_MAX_SUBS;
       if ( rc < 1 ) rc = 0; // fail-safe, should throw exception above in debug mode
